import Image, sys, types, random
from pyx import *

def quadraticToCubic(q0, q1, q2):
    c0 = q0
    c1 = q0 + ((q1 - q0) * 2.0 / 3.0)
    c2 = c1 + ((q2 - q0) * 1.0 / 3.0)
    c3 = q2

    return (c0, c1, c2, c3)

class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y
        
    def __repr__(self):
        return "(%.2f, %.2f)" % (self.x, self.y)
        
    def __add__(self, other):
        if type(other) in (types.IntType, types.LongType, types.FloatType):
            return Point(self.x + other, self.y + other)
        else:
            return Point(self.x + other.x, self.y + other.y)
        
    def __sub__(self, other):
        if type(other) in (types.IntType, types.LongType, types.FloatType):
            return Point(self.x - other, self.y - other)
        else:
            return Point(self.x - other.x, self.y - other.y)
        
    def __mul__(self, other):
        if type(other) in (types.IntType, types.LongType, types.FloatType):
            return Point(self.x * other, self.y * other)
        else:
            return Point(self.x * other.x, self.y * other.y)
        
    def __div__(self, other):
        if type(other) in (types.IntType, types.LongType, types.FloatType):
            return Point(self.x / other, self.y / other)
        else:
            return Point(self.x / other.x, self.y / other.y)
        
c = canvas.canvas()
i = Image.open('/Users/migurski/Pictures/Plane Silhouettes/cover.jpg')
b = bitmap.bitmap(0, 0, i, width=(i.size[0] * unit.w_pt), height=(i.size[1] * unit.w_pt))
c.insert(b, [trafo.rotate(30, x=(i.size[0] * unit.w_pt * 0.5), y=(i.size[1] * unit.w_pt * 0.5))])

# segments yanked from flash
segments = [[347,195,350.75,194.25,352,195,23.5135276455278], [342,196,342.75,195.25,347,195,29.6049376209889], [340.369548902605,196.402178820842,340.73652706597,196.508476029304,340.73652706597,196.508476029304,31.3985924628597], [341,197,341.75,195.5,342,196,42.1260833250971], [340,199,343,190,341,197,22.6556789145237], [336,211,339.75,197.5,340,199,6.35431840677812], [331,229,339.25,215.5,336,211,5.82194012594668], [320,247,322.25,244,331,229,6.98095736334072], [317,251,301.25,288.5,320,247,9.83247680678848], [338,201,318.5,238.5,317,251,2.24283594351031], [377.397479652536,131.329089678076,377.296673942466,131.208971857277,377.296673942466,131.208971857277,2.16986548347022], [364,151,355.75,176.5,338,201,2.87938381366189], [372.713786289963,102.880423815889,372.272838045778,102.851442194977,372.272838045778,102.851442194977,5.8463645111987], [375,117,379.5,123,364,151,4.21304807632686], [369,109,383.25,94,375,117,5.98842286459564], [350,129,378.5,93.75,369,109,3.26578689415796], [312,176,339,140.75,350,129,3.37381742761252], [276,223,291,201.25,312,176,5.30636231978341], [268.22300218789,237.696502483855,267.786945844517,237.483740380905,267.786945844517,237.483740380905,6.50854976108106], [256,252,253.75,251.25,276,223,9.14133756772268], [260.221235805418,252.564256493318,260.229519939743,252.879944336917,260.229519939743,252.879944336917,19.0180116538712], [259,253,245.5,273.25,256,252,15.8098975451488], [277,226,254.5,249.25,259,253,4.07300833985941], [307,195,292.75,209.25,277,226,5.46155776576187], [328.416179315103,179.165473802219,328.616519662933,179.484748166724,328.616519662933,179.484748166724,8.41803002933961], [326,176,325.25,178.25,307,195,8.90382987477867], [327,173,360,171.5,326,176,14.5657393424168], [294.327070648275,187.687589284143,294.760245467029,188.059013638755,294.760245467029,188.059013638755,1.71152619745388], [283,175,351.25,176.5,327,173,1.58469193439528], [192,173,275.25,179,283,175,1.19163983967254], [81,165,135.75,173.25,192,173,1.42625157709192], [9.32184224544929,133.096692330803,9.0942769988151,133.273203930019,9.0942769988151,133.273203930019,1.79542252375443], [8,154,8.75,140.5,81,165,2.06975339704788], [7,172,-62.75,153.25,8,154,2.9595320934852], [121.773615760455,223.055445326165,121.45887846612,223.250378943652,121.45887846612,223.250378943652,0.924722345708536], [100,197,14.5,182.75,7,172,1.0870381418479], [214,216,123.25,208.5,100,197,1.26951623774843], [335,226,283.25,226,214,216,1.78530129084588], [418.461109292693,233.914190581534,418.077652603854,234.297770551406,418.077652603854,234.297770551406,2.88063620706591], [399.644408456981,216.526407729834,399.500376769342,216.645783644635,399.500376769342,216.645783644635,2.51977366822016], [404,226,376.2875,226,335,226,2.85312642364803], [427.560569049162,230.406797766197,427.210090226331,229.995968802809,427.210090226331,229.995968802809,4.53532859173038], [439.324153999472,209.451500572171,438.971501222951,209.79418300176,438.971501222951,209.79418300176,6.54564634649414], [440.95,226,434.95,226,404,226,4.4437805523637], [445.480475057662,224.428950127214,445.071096367016,224.457549826708,445.071096367016,224.457549826708,6.06548528390848], [448.95,226,474.45,226,440.95,226,6.53003503299984], [414.95,226,469.6625,226,448.95,226,2.17124652220802], [342,226,396,225.25,414.95,226,1.78041691646507], [270,227,314.25,221.75,342,226,2.3667202160647], [211,234,238.75,232.5,270,227,3.52368782524513], [174,236,179.25,236,211,234,5.58120813064678], [169.73038433725,235.308927575592,169.931572124828,235.343886297662,169.931572124828,235.343886297662,5.07257162083445], [167,236,159.5,240.5,174,236,8.81150802026969], [177,230,156,238.25,167,236,5.17864627620606], [205,219,180.25,221.25,177,230,2.88762122590528], [238,216,211,216,205,219,2.87958851604128], [264.851910697296,216.105223428458,264.580997147132,216.270891707391,264.580997147132,216.270891707391,3.57201071895829], [274,216,250.75,209.25,238,216,3.13030299724917], [305,225,296,210,274,216,3.84086742921131], [317,245,322.25,227,305,225,4.98314373479259], [308.368799057789,277.315846987534,308.301325067412,276.980647305492,308.301325067412,276.980647305492,5.92382773594919], [310,269,315.25,267.5,317,245,6.23145180633177], [299.468373183269,272.357146302845,299.932677300755,272.637556765835,299.932677300755,272.637556765835,11.3228457844466], [303,271,308.25,278.5,310,269,8.97848007865021], [296,261,293.75,282,303,271,5.99140061559655], [302.634235812289,230.644326950541,303.127125214723,230.211113962462,303.127125214723,230.211113962462,6.13019708471471], [299,233,288.5,258.5,296,261,4.84642377201439], [313,199,298.75,217.75,299,233,6.5994598511689], [321.412881074311,188.384777808828,321.134510343267,188.773828896028,321.134510343267,188.773828896028,13.6635369258261], [332,174,324.5,184.5,313,199,10.8298240201966], [342,160,341.25,160.75,332,174,18.885481754299], [343,159,352,150.75,342,160,32.7077634059425], [331,170,353.5,152.75,343,159,3.81903907621446], [301,193,338.5,168.25,331,170,2.28691724761469], [251,226,282.5,211,301,193,2.26945059353918], [209,246,222.5,247.5,251,226,3.08483485811208], [189.613260334936,249.859367483128,189.845822184459,250.17656395521,189.845822184459,250.17656395521,3.60329056244684], [191,244,192.5,258.25,209,246,4.29708135924702], [189.748524438913,228.945089923832,189.37816854459,228.79203195652,189.37816854459,228.79203195652,3.37110743880485], [189,225,180.75,251.25,191,244,3.78428511409151], [217.697951762685,177.278251997234,217.624279315797,177.063538089899,217.624279315797,177.063538089899,3.97345757904652], [200,190,180.5,223,189,225,3.00899364283574], [226,146,199.75,170.75,200,190,3.64361717247748], [261,113,235.5,128.75,226,146,5.58278397224681], [295,92,275.5,98,261,113,9.35468962305728], [321,84,312.75,84,295,92,16.5295700073718], [331.099504048936,79.5053413272835,331.222007418051,79.8200346413068,331.222007418051,79.8200346413068,26.9053095775823], [332,84,332,83.25,321,84,29.8568911000257], [332,85,333.5,82.75,332,84,51.7946378045665], [329.509728360533,88.3578602217989,329.503788695282,87.9275851280349,329.503788695282,87.9275851280349,12.1523086548658], [330,88,284.25,-104.75,332,85,16.4786872587997], [288.960769454107,325.033273479214,288.524777958725,324.961557744315,288.524777958725,324.961557744315,10.5499540019299], [391,345,391,347.25,330,88,8.7972442919869]]

for seg in segments:

    seg = [s * unit.w_pt * 1.5 for s in seg]
    seg_ = [s - unit.w_pt for s in seg]

    q0 = Point(seg_[0], seg_[1])
    q1 = Point(seg_[2], seg_[3])
    q2 = Point(seg_[4], seg_[5])

    (c0, c1, c2, c3) = quadraticToCubic(q0, q1, q2)
    #c.stroke(path.curve(c0.x, c0.y, c1.x, c1.y, c2.x, c2.y, c3.x, c3.y), [style.linecap.round, style.miterlimit.lessthan180deg, color.rgb.black, style.linewidth(seg[6])])

for seg in segments:

    seg = [s * unit.w_pt * 1.5 for s in seg]

    q0 = Point(seg[0], seg[1])
    q1 = Point(seg[2], seg[3])
    q2 = Point(seg[4], seg[5])

    (c0, c1, c2, c3) = quadraticToCubic(q0, q1, q2)
    c.stroke(path.curve(c0.x, c0.y, c1.x, c1.y, c2.x, c2.y, c3.x, c3.y), [style.linecap.round, style.miterlimit.lessthan180deg, color.rgb.white, style.linewidth(seg[6])])

c.writeEPSfile('twaddle.eps')
